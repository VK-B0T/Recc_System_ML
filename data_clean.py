# -*- coding: utf-8 -*-
"""Minor Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AvUY1OKoHNo5FSRpptqvZd_hOuWC9_QC
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder

Cpu_DF = pd.read_csv('/content/drive/MyDrive/Minor Project/CPU_Dataset.csv', index_col=0)
Cpu_DF.head()

Cpu_DF.info()

Cpu_DF['Benchmark'] = Cpu_DF['BenchMarl']

Cpu_DF.drop(columns=['BenchMarl'], inplace=True)
Cpu_DF.head()

Cpu_DF["CPU_Name"] = Cpu_DF["CPU_Name"].str.title()
Cpu_DF["CPU_Name"]
Cpu_DF.describe()

Cpu_DF['Brand'] = np.where(Cpu_DF['CPU_Name'].str.contains('Intel', case=False), 'Intel',
                           np.where(Cpu_DF['CPU_Name'].str.contains('AMD', case=False), 'AMD', 'Other'))
# Display the updated DataFrame
print(Cpu_DF[['CPU_Name', 'Brand']].head())

min_value = Cpu_DF['powerPerf'].min()
max_value = Cpu_DF['powerPerf'].max()
basic_threshold = min_value + (max_value - min_value) / 3
mid_threshold = min_value + 2 * (max_value - min_value) / 3
print(min_value)
print(max_value)
print(basic_threshold)
print(mid_threshold)

def categorize_performance(power):
    if power < 336:
        return 'Basic'
    elif power < 668:
        return 'Mid'
    else:
        return 'High'

# Apply the categorization
Cpu_DF['Power_Category'] = Cpu_DF['powerPerf'].apply(categorize_performance)

Cpu_DF

Disk_DF = pd.read_csv('/content/drive/MyDrive/Minor Project/Disk_Dataset.csv')
Disk_DF.head()

Disk_DF.info()

Disk_DF['Price'] = Disk_DF['Price'].replace({'INR ': '', ',': ''}, regex=True).astype(float)

def categorize_disk(row):
    if row['Type'] == 'SSD':
        if row['Benchmark Rank'] < 1000:
            return 'High Performance SSD'
        elif 1000 <= row['Benchmark Rank'] <= 3000:
            return 'Mid Performance SSD'
        else:
            return 'Basic SSD'
    elif row['Type'] == 'HDD':
        if row['Benchmark Rank'] < 3000:
            return 'High Performance HDD'
        elif 3000 <= row['Benchmark Rank'] <= 6000:
            return 'Mid Performance HDD'
        else:
            return 'Basic HDD'

# Apply the categorization function to the dataset
Disk_DF['Category'] = Disk_DF.apply(categorize_disk, axis=1)

Disk_DF

def slab(size):
    if size <= 256:
        return '256 GB'
    elif size <= 512:
        return '512 GB'
    elif size <= 780:
        return '780 GB'
    elif size <= 1024:  # 1 TB
        return '1 TB'
    elif size <= 2048:  # 2 TB
        return '2 TB'
    else:
        return 'Higher than 2 TB'

Disk_DF['Size_Category'] = Disk_DF['Capacity  (in GBs)'].apply(slab)
Disk_DF

Gpu_DF = pd.read_csv('/content/drive/MyDrive/Minor Project/GPU_Dataset.csv')
Gpu_DF.head()

Gpu_DF.info()

Gpu_DF.drop(columns=['Unnamed: 0'], inplace=True)
Gpu_DF.head()

Gpu_DF['VRAM'] = Gpu_DF['memory'].str.extract(r'(\d+)').astype(float)

Gpu_DF['Clock_Speed'] = Gpu_DF['clock_speed'].str.extract(r'(\d+)').astype(float)

def categorize_gpu(row):
    if row['VRAM'] >= 12 and row['Clock_Speed'] > 1600 and row['Price'] > 75000:
        return 'High-Performance'
    elif 6 <= row['VRAM'] < 12 and 1300 <= row['Clock_Speed'] <= 1600 and 30000 <= row['Price'] <= 75000:
        return 'Mid-Range'
    else:
        return 'Basic-Level'

# Apply the categorization function to each row
Gpu_DF['Category'] = Gpu_DF.apply(categorize_gpu, axis=1)

# Display categorized GPUs
print(Gpu_DF[['GPU_Name', 'VRAM', 'Clock_Speed', 'Price', 'Category']])

Gpu_DF

Ram_DF = pd.read_csv('/content/drive/MyDrive/Minor Project/Ram_Dataset.csv')
Ram_DF.head()

Ram_DF.info()

Ram_DF['Size'] = Ram_DF['Size_GB'].str.extract(r'(\d+)').astype(float)

Ram_DF['Speed'] = Ram_DF['Speed'].str.replace(r'[^\d]', '', regex=True).astype(int)

def categorize_ram(row):
    size = row['Size']
    speed = row['Speed']

    # Categorize by size
    if size <= 8:
        size_category = "Basic"
    elif size <= 16:
        size_category = "Mid"
    else:
        size_category = "High"

    # Categorize by speed
    if speed < 2400:
        speed_category = "Basic"
    elif 2400 <= speed <= 3200:
        speed_category = "Mid"
    else:
        speed_category = "High"

    # Combine both categories
    if size_category == "High" or speed_category == "High":
        return "High"
    elif size_category == "Mid" or speed_category == "Mid":
        return "Mid"
    else:
        return "Basic"

# Apply the categorization function to each row
Ram_DF['Category'] = Ram_DF.apply(categorize_ram, axis=1)

# Save the processed dataset
Ram_DF.to_csv("Processed_RAM_Dataset.csv", index=False)

# Display a sample of the processed dataset
Ram_DF.head()

Ram_DF.to_csv('/content/drive/MyDrive/Minor Project/New Datasets/RAM.csv')
Gpu_DF.to_csv('/content/drive/MyDrive/Minor Project/New Datasets/GPU.csv')
Disk_DF.to_csv('/content/drive/MyDrive/Minor Project/New Datasets/DISK.csv')
Cpu_DF.to_csv('/content/drive/MyDrive/Minor Project/New Datasets/CPU.csv')

Cpu_DF.head(10)

Ram_DF.head()

Gpu_DF.head()

Gpu_DF.info()

Disk_DF.head()

